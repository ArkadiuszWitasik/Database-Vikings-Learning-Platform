generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  createdAt     DateTime  @default(now()) 
  updatedAt     DateTime  @updatedAt
  refreshTokens RefreshToken[]
  student       Student?
  lecturer      Lecturer?
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      Int
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Lecturer {
  id          Int       @id @default(autoincrement())
  isAdmin     Boolean
  userId      Int       @unique
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupsId    Int[]
  Group       Group[]
}


model Group {
  id          Int       @id @default(autoincrement())
  name        String    @unique 
  // relations
  lecturerId  Int       
  Lecturer    Lecturer  @relation(fields: [lecturerId], references: [id], onDelete: Cascade) 
  students    Student[]
  lessons     Lesson[]
}


model Student {
  id          Int       @id @default(autoincrement())
  indexNumber Int       @unique
  score       Int       @default(0)
  health      Int       @default(3)
  rank        Int?      @default(-1)
  lastLogin   DateTime?
  // relations
  userId      Int       @unique
  groupId     Int?      @unique
  answersId  Int[]
  Answers    Answer[]
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Group       Group?     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}


model Lesson {
  id          Int       @id @default(autoincrement())
  number      Int
  image       String?
  // relations    
  tasks       Task[]
  groupId     Int
  Group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Task {
  id          Int       @id @default(autoincrement())
  number      Int
  question    String
  openDate    DateTime  @default(now())
  closeDate   DateTime
  isExtra     Boolean   @db.Boolean @default(false)
  // relations
  lessonId    Int
  answers     Answer[]
  Lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}


enum ReplyStatus {
  CORRECT
  PARTLY_CORRECT
  INCORRECT
  PENDING
}

model Answer {
  id           Int         @id @default(autoincrement())
  solution     String      @db.Text
  replyStatus  ReplyStatus @default(PENDING)
  sendDate     DateTime    @default(now())
  replyDesc    String?
  replyDate    DateTime?
  grantedScore Int? 
  // relations
  taskId       Int       
  studentId    Int       
  Task         Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  Student      Student     @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

