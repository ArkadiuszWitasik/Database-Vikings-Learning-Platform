generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique @db.Char(maxLength: 25)
  password    String
  firstName   String    @db.Char(maxLength: 25)
  lastName    String    @db.Char(maxLength: 45)
  createdAt   DateTime  @default(now()) 
  updatedAt   DateTime  @updatedAt
  student     Student?
  lecturer    Lecturer?
}


model Lecturer {
  id          Int       @id @default(autoincrement())
  isAdmin     Boolean
  userId      Int       @unique
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupsId    Int[]
  Group       Group[]
}


model Group {
  id          Int       @id @default(autoincrement())
  name        String    @unique 
  // relations
  lecturerId  Int       @unique
  Lecturer    Lecturer  @relation(fields: [lecturerId], references: [id], onDelete: Cascade) 
  students    Student[]
  lessons     Lesson[]
}


model Student {
  id          Int       @id @default(autoincrement())
  indexNumber Int       @unique
  score       Int       
  health      Int
  rank        Int
  lastLogin   DateTime
  // relations
  userId      Int       @unique
  groupId     Int       @unique
  answearsId  Int[]
  Answears    Answear[]
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}


model Lesson {
  id          Int       @id @default(autoincrement())
  number      Int
  image       String
  // relations    
  tasks       Task[]
  groupId     Int
  Group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Task {
  id          Int       @id @default(autoincrement())
  number      Int
  question    String
  openDate    DateTime
  closeDate   DateTime
  isExtra     Boolean
  // relations
  lessonId    Int
  answears    Answear[]
  Lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}


enum ReplyStatus {
  CORRECT
  PARTLY_CORRECT
  INCORRECT
  PENDING
}

model Answear {
  id          Int       @id @default(autoincrement())
  solution    String    @db.Text
  replyStatus ReplyStatus @default(PENDING)
  sendDate    DateTime  @default(now())
  replyDesc   String?
  replyDate   DateTime?
  // relations
  taskId      Int       @unique
  studentId   Int       @unique
  Task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  Student     Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

